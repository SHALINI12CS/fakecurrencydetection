import os
from warnings import filterwarnings
filterwarnings('ignore')
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,accuracy_score,classification_report
import tensorflow as tf
import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Activation,Dropout,MaxPool2D,Conv2D,MaxPooling2D,Flatten
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import cv2
import numpy as np
import matplotlib.pyplot as plt
img_width,img_height=150,150
batch_size=3
epochs=10
path='/content/drive/MyDrive/Colab Notebooks/currency_dataset'
train_data_dir='/content/drive/MyDrive/Colab Notebooks/currency_dataset/processed_data/train'
test_data_dir='/content/drive/MyDrive/Colab Notebooks/currency_dataset/processed_data/test'
val_data_dir='/content/drive/MyDrive/Colab Notebooks/currency_dataset/processed_data/val'
trainGen=ImageDataGenerator(rescale=1./255,shear_range=0.2,horizontal_flip=True,zoom_range=0.2)
testGen=ImageDataGenerator(rescale=1./255)
train=trainGen.flow_from_directory(train_data_dir,target_size=(img_height,img_width),class_mode='binary',batch_size=batch_size,shuffle=True)
test=testGen.flow_from_directory(test_data_dir,target_size=(img_height,img_width),class_mode='binary',batch_size=batch_size)
model=Sequential()
model.add(Conv2D(128,(3,3),input_shape=(img_height,img_width,3),padding="same",activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Conv2D(64,3,3,padding="same",activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Dropout(0.2))
model.add(Conv2D(32,3,3,padding="same",activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Dropout(0.2))
model.add(Dense(32,activation='relu'))
model.add(Flatten())
model.add(Dense(32,activation='relu'))
model.add(Dense(1,activation=tf.nn.sigmoid))
model=Sequential()
model.add(Conv2D(128,(3,3),input_shape=(img_height,img_width,3),padding="same",activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Conv2D(64,3,3,padding="same",activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Dropout(0.2))
model.add(Conv2D(32,3,3,padding="same",activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Dropout(0.2))
model.add(Dense(32,activation='relu'))
model.add(Flatten())
model.add(Dense(32,activation='relu'))
model.add(Dense(1,activation=tf.nn.sigmoid))
model.summary()
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
epochs=10
model.fit(train,epochs=epochs,validation_data=test)
train_loss=model.history.history['loss']
train_loss
test_loss=model.history.history['val_loss']
test_loss
from keras.preprocessing import image
from keras.utils import load_img, img_to_array
plt.figure(figsize=(16,8))
plt.plot(np.arange(epochs),train_loss,color='g',label='train_loss')
plt.plot(np.arange(epochs),test_loss,color='r',label='test_loss')
plt.legend()
plt.xlabel('epochs')
plt.show()
def predict_note(path):
  img_pred=tf.keras.utils.load_img(path,target_size=(img_height,img_width,batch_size))
  img_pred=img_to_array(img_pred)
  img=np.expand_dims(img_pred,axis=0)
  classes= model.predict(img,batch_size=batch_size)
  print('Predicted class:',classes)
  if classes==1:
    print("Real currency")
  else:
    print("Fake currency")
predict_note('/content/drive/MyDrive/Colab Notebooks/currency_dataset/processed_data/test/fake/100 fake1 rotate.png')
